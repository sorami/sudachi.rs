searchState.loadedDescShard("sudachi", 0, "Clone of Sudachi, a Japanese morphological analyzer\nCreate an entry point into sudachi DSO plugin\nShort\nMiddle (similar to “word”)\nNamed Entity\nUnit to split text\nAble to tokenize Japanese text\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBreak text into <code>Morpheme</code>s\nBitset which represents that a word of a specified length …\nMaximum supported length of the word\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLattice which is constructed for performing the Viterbi …\nFind EOS node – finish the lattice construction\nFind the path with the minimal cost through the lattice to …\nFill the path with the minimum cost (indices only). …\nReturns the argument unchanged.\nChecks if there exist at least one at the word end boundary\nInsert a single node in the lattice, founding the path to …\nCalls <code>U::from(self)</code>.\nLookup a node for the index\nPrepare lattice for the next analysis of a sentence with …\nIterates over morpheme list\nClears morphemes from analysis result\nReturns an empty morpheme list\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates MorphemeList from components\nGets the whole cost of the path\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a new morpheme list splitting the morpheme with a …\nSplits morphemes and writes them into the resulting list …\nA morpheme (basic semantic unit of language)\nReturns the begin index in bytes of the morpheme in the …\nReturns the codepoint offset of the morpheme begin in the …\nReturns the dictionary form of morpheme\nReturns the dictionary id where the morpheme belongs\nReturns the end index in bytes of the morpheme in the …\nReturns the codepoint offset of the morpheme begin in the …\nReturns the argument unchanged.\nReturns the index of this morpheme\nCalls <code>U::from(self)</code>.\nReturns if this morpheme is out of vocabulary\nReturns the normalized form of morpheme\nReturns the part of speech\nReturns the reading form of morpheme.\nReturns new morpheme list splitting the morpheme with …\nSplits morpheme and writes sub-morphemes into the provided …\nReturns a substring of the original text which corresponds …\nReturns total cost from the beginning of the path\nReturns the word id of morpheme\nAccessor trait for the full path cost\nFull lattice node, as the result of analysis. All indices …\nAccessor trait for right connection id\nReturns begin offset in bytes of node surface in a sentence\nReturns range in bytes (for easy string slicing)\nUtility method for extracting [begin, end) codepoint range.\nConcatenate the nodes in the range and replace …\nConcatenate the nodes in the range and set pos_id.\nReturns end offset in bytes of node surface in a sentence\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs true when the word does not come from the dictionary. …\nIf a node is a special system node like BOS or EOS. Java …\nReturns number of codepoints in the current node\nReturns number of splits in a specified mode\nSplit the node with a specified mode using the dictionary …\nCreate a new debug stateful tokenizer with the following …\nBorrow current dictionary\nGet a clone of current dictionary\nPerform the actual tokenization so the analysis result …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConsume the Tokenizer and produce MorphemeList\nReturn current analysis mode\nCreate a new non-debug stateful tokenizer\nPrepare StatefulTokenizer for the next data. Data must be …\nSet debug flag and returns the current one\nSet the analysis mode and returns the current one\nAnalyzer will read only following [<code>WordInfo</code>] field subset\nSwap result data with the current analyzer\nProvides access to dictionary data\nImplementation of a Tokenizer which does not have …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSetting data loaded from config file\nStruct corresponds with raw config json file. You must use …\nSudachi Error\nResolves a possibly relative path with regards to all …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a minimal config with the provided resource …\nReturn required InfoSubset for the current projection type\nSets the system dictionary to the provided path\nA single system or user dictionary\nA dictionary consists of one system_dict and zero or more …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a system dictionary from bytes, and load a …\nCreates a system dictionary from bytes, and preloaded …\nCreates a system dictionary from bytes, and load embedded …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a binary dictionary from bytes\nCreates a system binary dictionary from bytes\nCreates a user binary dictionary from bytes\nBuilds a binary dictionary from csv lexicon and connection …\nCompile the binary dictionary and write it to the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new builder for system dictionary\nCreates a new builder for user dictionary\nRead the connection matrix from either a file or an …\nRead the csv lexicon from either a file or an in-memory …\nReturn dictionary build report\nResolve the dictionary references.\nSet the dictionary compile time to the specified time …\nSet the dictionary description\nActual specific errors for dictionary compilation\nDictionary building-process related parent error. Captures …\nContains the error value\nContains the success value\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAll categories at once except NOOOVBOW/2 \nLatin alphabets. \nCyrillic alphabets. \nA set of categories for a character\nThe fall back category. \nGreek alphabets. \nHiragana characters. \nCJKV ideographic characters. \nKanji numeric characters. \nKatakana characters. \nThis character cannot be the beginning of an OOV word \nThis and next characters cannot be the beginning of an OOV …\nNumerical characters. \nWhite spaces. \nSymbols. \nUser defined category. \nUser defined category. \nUser defined category. \nUser defined category. \nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nCharacterCategory holds mapping from character to …\nSudachi error\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a character category from file\nReturns a set of category types which given char has\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGets the value of the connection matrix\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns maximum number of left connection ID\nReturns maximum number of right connection ID\nReturns the argument unchanged.\nCreates a dictionary from the specified configuration …\nCreates a dictionary from the specified configuration and …\nCreates a dictionary from the specified configuration and …\nReturns grammar with the correct lifetime\nCalls <code>U::from(self)</code>.\nReturns lexicon with the correct lifetime\nDictionary grammar\nThe mapping from character to character_category_type\nReturns connection cost of nodes\nReturns the argument unchanged.\nReturns a pos_id of given pos in the grammar\nCalls <code>U::from(self)</code>.\nMerge a another grammar into this grammar\nCreates a Grammar from dictionary bytes\nGets POS components for POS ID. Panics if out of bounds.\nSets character category\nSets connect cost for a specific pair of ids\nDictionary header\nSudachi error\nHeader version\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns if this header version has grammar\nReturns if this header version has synonym group ids\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates new system dictionary header Its version field …\nCreates a new header from a dictionary bytes\nSet creation time\nDictionary lexicon\nResult of the Lexicon lookup\nThe first 4 bits of word_id are used to indicate that from …\nByte index of the word end\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns WordInfo for given word_id\nReturns word_param for given word_id. Params are (left_id, …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns an iterator of word_id and end of words that …\nAssign lexicon id to the current Lexicon\nupdate word_param cost based on current tokenizer\nId of the returned word\nOffset of word end\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nValue of Trie, this is not the pointer to WordId, but the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWordInfo API.\nInternal storage of the WordInfo. It is not accessible by …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSet of Lexicons\nSudachi error\nAdd a lexicon to the lexicon list\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns WordInfo for given WordId\nReturns WordInfo for given WordId. Only fills a requested …\nReturns word_param for given word_id\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns if dictionary capacity is full\nReturns iterator which yields all words in the dictionary, …\nCreates a LexiconSet given a lexicon\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nDictionary word ID\nCreates the WordId with correctness checking\nExtract Dictionary ID\nReturns the argument unchanged.\nCreate WordId from the compressed representation\nCalls <code>U::from(self)</code>.\nCheck if the word is OOV An OOV node can come of OOV …\nChecks if the WordId corresponds to a special node\nCheck if the word comes from the system dictionary\nCheck if the word comes from the user dictionary\nCreate WordId from parts\nCreates an OOV node for pos_id\nExtract Word ID\nContains the error value\nContains the error value\nContains the success value\nContains the success value\nSudachi error\nCustum nom error\nFailed to parse utf16 string\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInputBuffer - prepares the input data for the analysis\nProvides fast indexed access into the input text\nFinalizes InputBuffer state, making it RO\nWhether the byte can start a new word. Supports bytes not …\nCharacter category at char offset\nNumber of chars to the right of the offset with the same …\nCommon character category inside the range. Indexed by …\nDistance in chars between the char indexed by <code>index</code> and …\nReturns byte offsets of current chars\nReturns substring of the current (modified) text by …\nInput: Mod Char Idx\nBorrow modified data\nBorrow array of current characters\nReturns the argument unchanged.\nCreates input from the passed string. Should be used …\nReturns the argument unchanged.\nGet index of the current byte in original sentence Bytes …\nReturns char length to the next can_bow point\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn original data as owned, consuming itself    \nCreates new InputBuffer\nReturns substring of original text by indices from the …\nInput: Mod Char Idx\nBorrow original data\nRecompute chars from modified string (useful if the …\nReplace range with char\nReplace range with char, followed by chars from iterator\nReplace range with owned String\nReplace range with a &amp;str\nResets the input buffer, so it could be used to process …\nMoves InputBuffer into RW state, making it possible to …\nSwaps original data with the passed location\nMod Char Idx -&gt; Mod Byte Idx\nTranslate range from current state to original. …\nMod Char Idx -&gt; Orig Byte Idx\nMod Char Idx -&gt; Orig Char Idx\nExecute a function which can modify the contents of the …\nBoxed type of the plugin. Should be Box.\nType of the initialization function. It must take 0 …\nA category of Plugins\nCreate bundled plugin for plugin name Instead of full name …\nExtract plugin configurations from the config\nPerform initial setup. We can’t call set_up of the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTrait of plugin to edit connection cost in the grammar\nEdits the grammar\nLoads necessary information for the plugin\nTrait of plugin to modify the input text before …\nPerform rewrites\nActual implementation of rewriting. Call <code>apply_rewrite</code> …\nLoads necessary information for the plugin\nWhether the rewrite process uses chars\nProvides basic normalization of the input text\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTrait of plugin to provide oov node during tokenization\nGenerate a list of oov nodes offset - char idx\nLoads necessary information for the plugin\nprovides MeCab oov nodes\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nProvides a OOV node with single character if no words …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTrait of plugin to rewrite the path from lattice\nReturns a rewritten path\nLoads necessary information for the plugin\nConcatenates katakana oov nodes into one\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConcatenates numeric nodes as one\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA checker for words that cross boundaries\nA sentence boundary detector\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the byte index of the detected end of the sentence.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")